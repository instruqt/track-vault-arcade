id: l3ddywkqnj
type: arcade
version: 0.0.1
slug: vault-arcade
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/vault.png
title: Vault arcade
teaser: Are you the Master of Secrets?
description: |-
  Are you the Master of Secrets?

  This track is part of the HashiDays Amsterdam 2018 Instruqt Arcade Challenge. Play the track on our Arcade machine, or try your luck here.
tags: []
challenges:
- id: gvyybozeag
  slug: unseal
  title: Unseal
  teaser: Initialize Vault and unseal Vault
  notes:
  - type: text
    contents: |-
      Vault is a tool for securely accessing secrets.

      A secret is anything that you want to tightly control access to, such as API keys, passwords, or certificates. Vault provides a unified interface to any secret, while providing tight access control and recording a detailed audit log.
  - type: text
    contents: When a Vault server is started, it starts in a [sealed state](https://www.vaultproject.io/docs/concepts/seal.html).
      In this state, Vault is configured to know where and how to access the physical
      storage, but doesn't know how to decrypt any of it.
  - type: text
    contents: |-
      When the Vault is initialized it generates an encryption key which is used to protect all the data. That key is protected by a master key.

      By default Vault [splits the master key into 5 shares](https://en.wikipedia.org/wiki/Shamir's_Secret_Sharing), and sets a threshold of any 3 of those that are required to reconstruct the master key and unseal the Vault.
  - type: text
    contents: During [initialization](https://www.vaultproject.io/docs/commands/operator/init.html)
      the number of key shares and the unseal threshold can be specified.
  difficulty: basic
  assignment: |-
    Vault is running on http://localhost:8200.
    Initialize it with *1 key share* and a *threshold of 1*.

    Then unseal it and log in with the *root token*.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: vault
- id: kozzd8v66g
  slug: store-a-secret
  title: Write a secret
  teaser: Write a secret to Vault
  notes:
  - type: text
    contents: |-
      The [write](https://www.vaultproject.io/docs/commands/write.html) command writes data to Vault at the given path.

      The data can be credentials, secrets, configuration, or arbitrary data. The specific behavior of this command is determined at the thing mounted at the given path.
  difficulty: basic
  assignment: |-
    Write a secret to Vault on the path *secret/highscore*.

    The secret should contain *user=mrrobot* and *score=10000*.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: vault
- id: gx33bnle2g
  slug: read-a-secret
  title: Read a secret
  teaser: Read a secret from Vault
  notes:
  - type: text
    contents: |-
      The [read](https://www.vaultproject.io/docs/commands/read.html) command reads data from Vault at the given path.

      This can be used to read secrets, generate dynamic credentials, get configuration details, and more.
  difficulty: basic
  assignment: Read the secret from the previous challenge, located at the path *secret/highscore*.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: vault
- id: gd448ym5ng
  slug: enable-a-backend
  title: Enable a secrets backend
  teaser: Enable a secrets backend
  notes:
  - type: text
    contents: |-
      Secrets engines are components which store, generate, or encrypt data.

      Secrets engines are incredibly flexible, so it is easiest to think about them in terms of their function. Secrets engines are provided some set of data, they take some action on that data, and they return a result.
  - type: text
    contents: |-
      Some secrets engines simply store and read data - like encrypted Redis/Memcached.

      Other secrets engines connect to other services and generate dynamic credentials on demand.

      And even other secrets engines provide encryption as a service, totp generation, certificates, and much more.
  - type: text
    contents: |-
      Secrets engines are enabled at a "path" in Vault.

      Each secrets engine defines its own paths and properties. To the user, secrets engines behave similar to a virtual filesystem. Just like normal secrets they support operations like read, write, and delete.
  - type: text
    contents: |-
      The [database secrets engine](https://www.vaultproject.io/docs/secrets/databases/index.html) generates database credentials dynamically based on configured roles.

      It works
      with a number of [different databases](https://www.vaultproject.io/api/secret/databases/postgresql.html) through a plugin interface.
  difficulty: basic
  assignment: |-
    Enable the database secrets backend.
    Then configure *database/config/postgres* so it uses connection_url *postgresql://{{username}}:{{password}}@postgres:5432/?sslmode=disable*, *allowed_roles=postgres*, *username=postgres*, *password=notsecure* and the *plugin_name=postgresql-database-plugin*.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: vault
- id: gw33b8aelk
  slug: generate-credentials
  title: Generate dynamic credentials
  teaser: Generate dynamic postgres credentials
  notes:
  - type: text
    contents: For Vault to be able to generate database credentials, a [role](https://www.vaultproject.io/api/secret/databases/index.html#create-role)
      needs to be configured.
  - type: text
    contents: |-
      Roles use SQL [statements](https://www.vaultproject.io/api/secret/databases/postgresql.html#statements) to create, revoke, rollback and/or renew credentials.

      Roles can be created by writing to the `database/roles/<role-name>` path.
  difficulty: basic
  assignment: |-
    Configure *database/roles/postgres* so that it can create database credentials with the following SQL statements.

    CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"{{name}}\";

    You can test the configuration by reading from the *database/creds/postgres* endpoint.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: vault
- id: 7q66oz9e6g
  slug: one-time-passwords
  title: One time passwords
  teaser: Configure Vault as TOTP provider
  notes:
  - type: text
    contents: |-
      Another secrets engine in Vault is the [TOTP generator](https://www.vaultproject.io/docs/secrets/totp/index.html).

      The TOTP secrets engine generates time-based credentials according to the TOTP standard.
  - type: text
    contents: |-
      The TOTP secrets engine can act as a TOTP code [generator](https://www.vaultproject.io/docs/secrets/totp/index.html#as-a-generator).

      In this mode, it can replace traditional TOTP generators like Google Authenticator. It provides an added layer of security since the ability to generate codes is guarded by policies and the entire process is audited.
  - type: text
    contents: |-
      The TOTP secrets engine can also act as a TOTP [provider](https://www.vaultproject.io/docs/secrets/totp/index.html#as-a-provider).

      In this mode, it can be used to generate new keys and validate passwords generated using those keys.
  difficulty: basic
  assignment: |-
    Enable the TOTP secrets engine and configure Vault to be a *TOTP provider* on the path *totp/keys/mrrobot*.

    The issuer should be *Vault* and the account_name should be *mrrobot@instruqt.com*.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: vault
- id: 7raab4xewg
  slug: generate-totp
  title: Generate TOTP
  teaser: Generate one-time passwords
  notes:
  - type: text
    contents: |-
      The TOTP secrets engine can act as a TOTP code [generator](https://www.vaultproject.io/docs/secrets/totp/index.html#as-a-generator).

      In this mode, it can replace traditional TOTP generators like Google Authenticator. It provides an added layer of security since the ability to generate codes is guarded by policies and the entire process is audited.
  difficulty: basic
  assignment: |-
    Configure the previously configured Vault TOTP provider as a TOTP code generator.

    For convenience we set the TOTP_SECRET environment variable to the Vault TOTP secret url.
  timelimit: 300
  tabs:
  - type: terminal
    title: Shell
    hostname: vault
developers:
- ade@instruqt.com
- erik@instruqt.com
- jackson.nic@gmail.com
- anubhav9mishra@gmail.com
published: false
